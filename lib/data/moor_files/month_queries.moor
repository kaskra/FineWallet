import
'tables.moor';
import
'views.moor';

_allMonths:
    SELECT *
    FROM months
    ORDER BY firstDate ASC;

_monthIdByDate:
    SELECT id
    FROM months
    WHERE :date <= lastDate
      AND :date >= firstDate;

_monthByDate:
    SELECT *
    FROM months
    WHERE :date <= lastDate
      AND :date >= firstDate;

_monthById:
    SELECT *
    FROM months
    WHERE id = :id;


_syncMaxBudgetFromIncome:
WITH maxBudgets(monthId, budget) AS (SELECT m.id, IFNULL(SUM(amount),0)
    FROM months m LEFT OUTER JOIN (SELECT * FROM fullTransactions WHERE NOT isExpense) t
    ON m.id = t.monthId
    GROUP BY m.id)
UPDATE months
SET maxBudget = (SELECT budget FROM maxBudgets WHERE months.id = monthId)
WHERE EXISTS(SELECT budget FROM maxBudgets WHERE months.id = monthId)
  AND maxBudget > (SELECT budget FROM maxBudgets WHERE months.id = monthId);

_insertCurrentMonthIfNotExists:
INSERT INTO months (maxBudget, firstDate, lastDate)
    SELECT 0, DATE('now', 'start of month'), DATE('now', 'start of month', '+1 month', '-1 day')
    WHERE NOT EXISTS( SELECT * FROM months WHERE lastDate >= DATE('now') AND firstDate <= DATE('now'));

_allMonthDetails AS MonthWithDetails: WITH
    income(monthid, amount) AS (SELECT monthId, IFNULL(SUM(amount),0) FROM fullTransactions WHERE NOT isExpense GROUP BY monthId),
    expense(monthid, amount) AS (SELECT monthId, IFNULL(SUM(amount),0) FROM fullTransactions WHERE isExpense GROUP BY monthId)
SELECT IFNULL(i.amount,0) AS income, IFNULL(e.amount,0) AS expense, (IFNULL(i.amount,0) - IFNULL(e.amount,0)) AS savings, month.**
FROM months month
LEFT JOIN income i ON i.monthid = month.id
LEFT JOIN expense e ON e.monthid = month.id
WHERE :date >= month.firstDate
ORDER BY month.firstDate DESC;

_currentMonthDetails AS MonthWithDetails: WITH
    income(monthid, amount) AS (SELECT monthId, IFNULL(SUM(amount),0) FROM fullTransactions WHERE NOT isExpense GROUP BY monthId),
    expense(monthid, amount) AS (SELECT monthId, IFNULL(SUM(amount),0) FROM fullTransactions WHERE isExpense GROUP BY monthId)
SELECT IFNULL(i.amount,0) AS income, IFNULL(e.amount,0) AS expense, (IFNULL(i.amount,0) - IFNULL(e.amount,0)) AS savings, month.**
FROM months month
LEFT JOIN income i ON i.monthid = month.id
    LEFT JOIN expense e ON e.monthid = month.id
WHERE :date >= month.firstDate AND :date <= month.lastDate
ORDER BY month.firstDate DESC;


-- createOrGet: INSERT INTO months (firstDate, lastDate)
--     SELECT DATE(:date, 'start of month'), DATE(:date, 'start of month', '+1 month', '-1 day')
--     WHERE NOT EXISTS(SELECT firstDate, lastDate FROM months
--     WHERE  firstDate <= DATE(:date) AND lastDate >= DATE(:date)) RETURNING id;

