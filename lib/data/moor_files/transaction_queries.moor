import
'tables.moor';
import
'views.moor';

_transactions:
SELECT *
FROM fullTransactions;

_baseTransactions:
SELECT * FROM baseTransactions;

_baseTransactionById:
SELECT * FROM baseTransactions WHERE id=:id;

_deleteTxById:
DELETE
FROM baseTransactions
WHERE id = :id;

_deleteTxsByIds:
DELETE
FROM baseTransactions
WHERE id IN :ids;

_totalSavings:
SELECT (SELECT ifnull(SUM(amount),0) FROM fullTransactions WHERE NOT isExpense AND date < m.firstDate) -
    (SELECT ifnull(SUM(amount),0) FROM fullTransactions WHERE isExpense AND date < m.firstDate)
FROM months m
WHERE m.firstDate <= :date AND m.lastDate >= :date;

_transactionsWithFilter ($predicate = True) AS TransactionWithDetails:
SELECT t.*, cc.**, s.**, c.**
FROM fullTransactions t,
     categories cc,
     subcategories s,
     currencies c
WHERE t.subcategoryId = s.id
  AND t.currencyId = c.id
  AND s.categoryId = cc.id
  AND $predicate
ORDER BY t.date DESC, t.id DESC;

_monthlyIncome:
SELECT ifnull(SUM(t.amount),0) as income
FROM fullTransactions t
WHERE NOT t.isExpense
  AND t.monthId = (SELECT m.id FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date);

_expensesPerDayInMonth:
SELECT t.date, ifnull(SUM(t.amount),0) AS expense
FROM fullTransactions t
WHERE t.isExpense
  AND t.monthId = (SELECT m.id FROM months m WHERE m.firstDate <= :dateInMonth AND m.lastDate >= :dateInMonth)
GROUP BY t.date
ORDER BY t.date ASC;

_sumTransactionsByCategory ($predicate = True):
SELECT c.**, ifnull(SUM(t.amount),0) as sumAmount
FROM fullTransactions t,
     categories c,
     subcategories s
WHERE t.subcategoryId = s.id
  AND s.categoryId = c.id
  AND $predicate
GROUP BY c.id;

_nLatestTransactions AS TransactionWithDetails:
SELECT t.*, cc.**, s.**, c.**
FROM fullTransactions t,
     categories cc,
     subcategories s,
     currencies c
WHERE t.subcategoryId = s.id
  AND t.currencyId = c.id
  AND s.categoryId = cc.id
GROUP BY t.id HAVING MIN(t.id) -- hack to get the same output model as 'with filter'. Take first of recurrences
ORDER BY t.id DESC LIMIT :N;

_monthlyBudget:
SELECT (SELECT m.maxBudget + m.savingsBudget FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date) -
       (SELECT ifnull(SUM(t.amount),0)
        FROM fullTransactions t
        WHERE t.isExpense
          AND t.monthId = (SELECT m.id FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date));

_dailyBudget(:remainingDays AS INT): WITH
    monthByDate(id, amount) AS (SELECT m.id, m.maxBudget + m.savingsBudget FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date),
    allExpenses(date, amount) AS (SELECT t.date, t.amount FROM fullTransactions t WHERE t.isExpense
        AND t.monthId = (SELECT m.id FROM monthByDate m) AND (t.recurrenceType = 2 OR t.recurrenceType = 1)),
    monthlyExpenses(amount) AS (SELECT ifnull(SUM(t.amount),0) FROM allExpenses t WHERE t.date != :date),
    dayExpenses(amount) AS (SELECT ifnull(SUM(t.amount),0) FROM allExpenses t WHERE t.date = :date)
SELECT (b.amount - m.amount) / :remainingDays - d.amount
FROM monthByDate b,
     monthlyExpenses m,
     dayExpenses d;

_lastWeeksTransactions:
SELECT date, ifnull(SUM(amount),0) AS sumAmount
FROM fullTransactions
WHERE isExpense AND date > DATE('now', '-7 days')
GROUP BY date
    LIMIT 7;

_transactionsLabels:
SELECT DISTINCT label
FROM baseTransactions
WHERE isExpense = :isExpense
  AND NOT label = ''
ORDER BY label ASC;