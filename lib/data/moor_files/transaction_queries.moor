import 'tables.moor';
import 'views.moor';

transactions: SELECT * FROM fullTransactions;
deleteTxById: DELETE FROM baseTransactions WHERE id=:id;
deleteTxsByIds: DELETE FROM baseTransactions WHERE id IN :ids;

totalSavings(:date AS DATE): SELECT (SELECT SUM(amount) FROM fullTransactions WHERE NOT isExpense AND date < :date) - (SELECT SUM(amount) FROM fullTransactions WHERE isExpense AND date < :date);

transactionsWithFilter ($predicate = True): SELECT t.*, cc.**, s.**, c.**
    FROM fullTransactions t, categories cc, subcategories s, currencies c
    WHERE t.subcategoryId = s.id AND t.currencyId = c.id AND s.categoryId = cc.id AND $predicate
    ORDER BY t.date DESC, t.id DESC;

monthlyIncome(:date AS DATE): SELECT SUM(t.amount) as income FROM fullTransactions t
    WHERE NOT t.isExpense AND t.monthId = (SELECT m.id FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date);

expensesPerDayInMonth(:dateInMonth AS DATE): SELECT t.date, SUM(t.amount) AS expense FROM fullTransactions t
    WHERE t.isExpense AND t.monthId = (SELECT m.id FROM months m WHERE m.firstDate <= :dateInMonth AND m.lastDate >= :dateInMonth)
    GROUP BY t.date
    ORDER BY t.date ASC;

sumTransactionsByCategory ($predicate = True): SELECT c.**, SUM(amount) as sumAmount FROM fullTransactions t, categories c, subcategories s
                           WHERE t.subcategoryId = s.id AND s.categoryId = c.id AND $predicate
                           GROUP BY c.id;

nLatestTransactions: SELECT t.**, cc.**, s.**, c.** FROM baseTransactions t,categories cc, subcategories s, currencies c
    WHERE t.subcategoryId = s.id AND t.currencyId = c.id AND s.categoryId = cc.id
    ORDER BY t.id DESC LIMIT :N;

monthlyBudget(:date AS DATE): SELECT (SELECT m.maxBudget FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date) -
                      (SELECT SUM(amount) FROM fullTransactions t
                      WHERE t.isExpense
                        AND t.monthId = (SELECT m.id FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date));

dailyBudget(:remainingDays AS INT, :date AS DATE): WITH
    budget(amount) AS (SELECT m.maxBudget FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date),
    monthlyExpenses(amount) AS (SELECT SUM(amount) FROM fullTransactions t WHERE t.isExpense
        AND t.monthId = (SELECT m.id FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date)
        AND t.date != :date AND (t.recurrenceType == 2 OR t.recurrenceType == 1)),
    dailyExpenses(amount) AS (SELECT SUM(amount) FROM fullTransactions t WHERE t.isExpense
        AND t.monthId = (SELECT m.id FROM months m WHERE m.firstDate <= :date AND m.lastDate >= :date)
        AND t.date = :date AND (t.recurrenceType == 2 OR t.recurrenceType == 1))
    SELECT (b.amount - m.amount) / :remainingDays - d.amount FROM budget b, monthlyExpenses m, dailyExpenses d;

lastWeeksTransactions: SELECT date, SUM(amount) AS sumAmount FROM fullTransactions
    WHERE isExpense AND date > DATE('now', '-7 days')
    GROUP BY date
    LIMIT 7;

transactionsLabels: SELECT DISTINCT label FROM baseTransactions
    WHERE isExpense=:isExpense AND NOT label = ''
    ORDER BY label ASC;